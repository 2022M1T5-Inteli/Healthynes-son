[gd_scene load_steps=26 format=2]

[sub_resource type="GDScript" id=25]
script/source = "extends KinematicBody2D

export(int) var SPEED: int = 60
var velocity: Vector2 = Vector2.ZERO
var path: Array = []    # Posições do caminho traçado em generate_path()
var levelNavigation: Navigation2D = null
var player = null
var player_spotted: bool = false
var caminho = null
var positionPath = []
var a = ((randi() % 4) + 1 )
var arrived_caminho: bool = false
#onready var line2d = $Line2D
onready var los = $LineOfSight


onready var animationPlayer = $AnimationPlayer
onready var animationTree = $AnimationTree
onready var animationState = animationTree.get(\"parameters/playback\")
const aceleracao = 500
const velocidade_Maxima = 80
const friccao = 500
# ativar a arvore de animacao quando o jogo for iniciado

	

var pode = false

# Pega os nodes de outras cenas para serem usados no código e define o array de sorteamento de caminhos
func _ready():
	animationTree.active = true
	positionPath.append(0)
	positionPath.append(1)
	positionPath.append(2)
	positionPath.append(3)
	yield(get_tree(), \"idle_frame\")
	var tree = get_tree()
	
	if tree.has_group(\"LevelNavigation\"):
		levelNavigation = tree.get_nodes_in_group(\"LevelNavigation\")[0]
	if tree.has_group(\"Player\"):
		player = tree.get_nodes_in_group(\"Player\")[0]
	if tree.has_group(\"Caminhos\"):
		caminho = tree.get_nodes_in_group(\"Caminhos\")[positionPath[0]]

# A visão do inimigo sempre rotacionará em direção ao player e se colidirem, irá gerar o path até o player, caso contrario, irá gerar o path até outro lugar
func _physics_process(delta):

#	line2d.global_position = Vector2.ZERO
		
	if velocity == null:
		print(\"oi\")
	
	if player:
		los.look_at(player.global_position)
		check_player_in_detection()
		
		if player_spotted:
			generate_path()
			navigate(delta)
		else:
			common_path()
			navigate(delta)
			if arrived_caminho and pode:
				change_path()
				
			
	move()

# Checar se o player e apenas o player esta na linha de visão, se não estiver, retornar como falso.
func check_player_in_detection() -> bool:
	var collider = los.get_collider()
	
	if collider == null:
		player_spotted = false
	if collider and collider.is_in_group(\"Player\"):
		player_spotted = true
		return true
	return false

# Define a posição e direção para o próximo ponto do path determinado
func navigate(delta):   
	if path.size() > 0:
		velocity = global_position.direction_to(path[1]) * SPEED
		if velocity:
			animationTree.set(\"parameters/Idle/blend_position\", velocity)
			animationTree.set(\"parameters/Run/blend_position\", velocity)
			animationState.travel(\"Run\")
			velocity = velocity.move_toward(velocity * velocidade_Maxima, aceleracao * delta)
	else:
		animationState.travel(\"Idle\")
		# Se chegou no ponto desejado, apaga o ponto
		if global_position == path[0]:
			path.pop_front()

# Se navegação e player forem diferente de null (definidos no _ready) desenhar o path até o player.
func generate_path():
	var distance_from_player = global_position.distance_to(player.global_position)
	print(distance_from_player)

	if levelNavigation != null and player != null:
		path = levelNavigation.get_simple_path(global_position, player.global_position, false)
		if distance_from_player <= 4:
			tempo.player_dead = true
#		line2d.points = path


# Se navegação e caminho forem diferente de null desenhar o path até um caminho randômico.
func common_path():
	var distance_from_caminho = global_position.distance_to(caminho.global_position)
	
	if levelNavigation != null and caminho != null:
		path = levelNavigation.get_simple_path(global_position, caminho.global_position, false)
#		line2d.points = path
		if distance_from_caminho < 10:
			arrived_caminho = true
			pode = true
			
# Randomiza o proximo caminho a ser seguido
func change_path():
	var tree = get_tree()
	
	caminho = tree.get_nodes_in_group(\"Caminhos\")[positionPath[randi() % positionPath.size()]]
	pode = false
	
# Mover
func move():
	velocity = move_and_slide(velocity)
"

[sub_resource type="StreamTexture" id=26]
load_path = "res://.import/Lurdes_ALL.png-0abab032db1c23329d62851e5503c42f.stex"

[sub_resource type="Animation" id=2]
resource_name = "IdleDown"
length = 0.1
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 12 ]
}

[sub_resource type="Animation" id=3]
resource_name = "IdleLeft"
length = 0.1
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 6 ]
}

[sub_resource type="Animation" id=4]
resource_name = "IdleRight"
length = 0.1
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 0 ]
}

[sub_resource type="Animation" id=5]
resource_name = "IdleUp"
length = 0.1
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 18 ]
}

[sub_resource type="Animation" id=6]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 12 ]
}

[sub_resource type="Animation" id=7]
resource_name = "RunDown"
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 12, 13, 14, 15, 16, 17 ]
}

[sub_resource type="Animation" id=8]
resource_name = "RunLeft"
length = 0.6
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 6, 7, 8, 9, 10, 11 ]
}

[sub_resource type="Animation" id=9]
resource_name = "RunRight"
length = 0.6
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 1, 2, 3, 4, 5, 0 ]
}

[sub_resource type="Animation" id=10]
resource_name = "RunUp"
length = 0.6
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 18, 19, 20, 21, 22, 23 ]
}

[sub_resource type="AnimationNodeAnimation" id=11]
animation = "IdleDown"

[sub_resource type="AnimationNodeAnimation" id=12]
animation = "IdleUp"

[sub_resource type="AnimationNodeAnimation" id=13]
animation = "IdleLeft"

[sub_resource type="AnimationNodeAnimation" id=14]
animation = "IdleRight"

[sub_resource type="AnimationNodeBlendSpace2D" id=15]
blend_point_0/node = SubResource( 11 )
blend_point_0/pos = Vector2( 0, 1 )
blend_point_1/node = SubResource( 12 )
blend_point_1/pos = Vector2( 0, -1 )
blend_point_2/node = SubResource( 13 )
blend_point_2/pos = Vector2( -1, 0 )
blend_point_3/node = SubResource( 14 )
blend_point_3/pos = Vector2( 1, 0 )
blend_mode = 1

[sub_resource type="AnimationNodeAnimation" id=16]
animation = "RunLeft"

[sub_resource type="AnimationNodeAnimation" id=17]
animation = "RunRight"

[sub_resource type="AnimationNodeAnimation" id=18]
animation = "RunDown"

[sub_resource type="AnimationNodeAnimation" id=19]
animation = "RunUp"

[sub_resource type="AnimationNodeBlendSpace2D" id=20]
blend_point_0/node = SubResource( 16 )
blend_point_0/pos = Vector2( -1, 0 )
blend_point_1/node = SubResource( 17 )
blend_point_1/pos = Vector2( 1, 0 )
blend_point_2/node = SubResource( 18 )
blend_point_2/pos = Vector2( 0, 1 )
blend_point_3/node = SubResource( 19 )
blend_point_3/pos = Vector2( 0, -1 )
blend_mode = 1

[sub_resource type="AnimationNodeStateMachineTransition" id=21]

[sub_resource type="AnimationNodeStateMachineTransition" id=22]

[sub_resource type="AnimationNodeStateMachine" id=23]
states/Idle/node = SubResource( 15 )
states/Idle/position = Vector2( 341, 148 )
states/Run/node = SubResource( 20 )
states/Run/position = Vector2( 526, 148 )
transitions = [ "Idle", "Run", SubResource( 21 ), "Run", "Idle", SubResource( 22 ) ]
start_node = "Idle"

[sub_resource type="AnimationNodeStateMachinePlayback" id=24]

[node name="Enemy" type="KinematicBody2D"]
collision_layer = 4
collision_mask = 3
script = SubResource( 25 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( -3.57628e-07, -7 )
scale = Vector2( 0.967285, 0.975098 )
texture = SubResource( 26 )
hframes = 24
frame = 12

[node name="Line2D" type="Line2D" parent="."]
width = 2.0

[node name="LineOfSight" type="RayCast2D" parent="."]
scale = Vector2( 1.5, 1 )
enabled = true
cast_to = Vector2( 70, 0 )
collision_mask = 3

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/IdleDown = SubResource( 2 )
anims/IdleLeft = SubResource( 3 )
anims/IdleRight = SubResource( 4 )
anims/IdleUp = SubResource( 5 )
anims/RESET = SubResource( 6 )
anims/RunDown = SubResource( 7 )
anims/RunLeft = SubResource( 8 )
anims/RunRight = SubResource( 9 )
anims/RunUp = SubResource( 10 )

[node name="AnimationTree" type="AnimationTree" parent="."]
tree_root = SubResource( 23 )
anim_player = NodePath("../AnimationPlayer")
parameters/playback = SubResource( 24 )
parameters/Idle/blend_position = Vector2( 0, 0 )
parameters/Run/blend_position = Vector2( 0, 0 )
